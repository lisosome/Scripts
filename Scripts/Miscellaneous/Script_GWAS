## calcolo kinship con GEMMA
/shared/software/gemma/gemma-0.98-linux-static  -bfile /netapp02/data/genotypes/SR/SR_updated_20210312 -gk 2 -o /home/nardone/SR_updated_20210312_kinship
##

##regressione con GEMMA
chr=22
geno=/netapp02/data/imputation/HRC/SR/BIMBAM/chr${chr}.pbwt_reference_impute_clean.gen.gz.bimbam.gz
pheno=/home/nardone/File_GEMMA/PHENO_893_D_P_SR.txt
snp_ann=/netapp02/data/imputation/HRC/SR/BIMBAM/chr${chr}.pbwt_reference_impute_clean.gen.gz.pos
kinship=/home/nardone/output/SR_updated_20210312_kinship.sXX.txt
cov=/home/nardone/File_GEMMA/Covariate_sesso_eta_scolarita_D_P_SR.txt
out=GEMMA_SR_discromie_D_P_chr${chr}.txt
echo "/shared/software/gemma/gemma-0.98.4-linux-static-AMD64 -g ${geno} -p ${pheno} -a ${snp_ann} -k ${kinship} -lm 4 -maf 0 -c ${cov} -o ${out}" |  qsub -N job_${chr}_v  -o \$JOB_ID_${chr}_v.log -e \$JOB_ID_${chr}_v.e -V -l h_vmem=10G -cwd -q fast,all.q@geneticalabdb7.burlo.trieste.it

## for loop regressione Gemma
for chr in {1..21}
do
geno=/netapp02/data/imputation/HRC/SR/BIMBAM/chr${chr}.pbwt_reference_impute_clean.gen.gz.bimbam.gz
pheno=/home/nardone/File_GEMMA/PHENO_893_D_P_SR.txt
snp_ann=/netapp02/data/imputation/HRC/SR/BIMBAM/chr${chr}.pbwt_reference_impute_clean.gen.gz.pos
kinship=/home/nardone/output/SR_updated_20210312_kinship.sXX.txt
cov=/home/nardone/File_GEMMA/Covariate_sesso_eta_scolarita_D_P_SR.txt
out=GEMMA_SR_discromie_D_P_chr${chr}.txt
echo "/shared/software/gemma/gemma-0.98-linux-static -g ${geno} -p ${pheno} -a ${snp_ann} -k ${kinship} -lm 4 -maf 0 -c ${cov} -o ${out}" |  qsub -N job_${chr}_v  -o \$JOB_ID_${chr}_v.log -e \$JOB_ID_${chr}_v.e -V -l h_vmem=10G -cwd -q fast,all.q@geneticalabdb7.burlo.trieste.it
done

##selezione 0.01<MAF<0.99 [Ubuntu]
chr=22
echo -e 'chr\trs\tps\tn_mis\tn_obs\tallele1\tallele0\taf\tbeta\tse\tp_wald\tp_lrt\tp_score' > /home/nardone/Discromie/Deutano_Protano/File_Filt_MAF01/SR_D_P_maf01_chr${chr}.txt
cat /home/nardone/Discromie/Deutano_Protano/output/GEMMA_SR_discromie_D_P_chr22.txt.assoc.txt | sed '1d' |  awk 'BEGIN {FS=" "} ($8>=0.01 && $8<=0.99) {print $0}' >> /home/nardone/Discromie/Deutano_Protano/Test_MAF/SR_D_P_maf01_chr${chr}.csv

## for loop MAF [Ubuntu]
for chr in {1..21}
do
echo -e 'chr\trs\tps\tn_mis\tn_obs\tallele1\tallele0\taf\tbeta\tse\tp_wald\tp_lrt\tp_score'> /home/nardone/Discromie/Deutano_Protano/File_Filt_MAF01/SR_D_P_maf01_chr${chr}.txt
cat /home/nardone/Discromie/Deutano_Protano/output/GEMMA_SR_discromie_D_P_chr${chr}.txt.assoc.txt | sed '1d' |  awk 'BEGIN{FS=" "} ($8>=0.01 && $8<=0.99) {print $0}' >> /home/nardone/Discromie/Deutano_Protano/File_Filt_MAF01/SR_D_P_maf01_chr${chr}.txt
done

## recupero RSQ per Silk Road
cd /netapp02/data/imputation/HRC/SR/prob
file .info

######## in R #####
#codice per recuperare rsq in R
chr=22
file_name<-paste("SR_D_P_maf01_chr",chr,".txt",sep="")
d<-read.table(file=file_name,he=T)
dim(d) # 5678879      13
info<-read.table(file=paste("/netapp02/data/imputation/HRC/SR/prob/SR_HRC_chr",chr,".info",sep=""),he=T)
info<-info[info$Rsq>=0.4,]
## Aggiungere colonna rs_allele1_allele0 nel file info per poter confrontare i file
info$key<-paste(info$rs_id,info$A0,info$A1,sep="_")
##Unire i due file
d1<-d[d$rs%in%info$key,] #prendo righe in comune tra i due files
write.table(d1,"/home/nardone/Discromie/Deutano_Protano/Test_RSQ/SR_Discromie_rsid_rsq04_maf01.txt",quote=F,col.names = T,row.names = F, sep="\t")

##Loop automatizzazione step precedenti creando file che comprendono gli rs in R
for(chr in 1:21){
	file_name<-paste("SR_D_P_maf01_chr",chr,".txt",sep="")
	d<-read.table(file=file_name,he=T)
	info<-read.table(file=paste("/netapp02/data/imputation/HRC/SR/prob/SR_HRC_chr",chr,".info",sep=""),he=T)
	 info<-info[info$Rsq>=0.4,]
	 info$key<-paste(info$SNP,info$A0,info$A1,sep="_")
	 d1<-d[d$rs%in%info$key,]
	 file_out=paste("/home/nardone/Discromie/Deutano_Protano/Test_RSQ/chr", chr,"_SR_Discromie_rsid_rsq04_maf01.txt", sep="")
	 write.table(d1,file_out,col.names = T,row.names = F, sep="\t")
}
## Loop per senza rs in R
for(chr in 1:22){
	file_name<-paste("SR_D_P_maf01_chr",chr,".txt",sep="")
	d<-read.table(file=file_name,he=T)
	info<-read.table(file=paste("/netapp02/data/imputation/HRC/SR/prob/SR_HRC_chr",chr,".info",sep=""),he=T)
	 info<-info[info$Rsq>=0.4,]
	 d1<-d[d$rs%in%info$SNP,]
	 file_out=paste("/home/nardone/Discromie/Deutano_Protano/Test_RSQ/chr", chr,"_SR_Discromie_NOrs_rsq04_maf01.txt", sep="")
	 write.table(d1,file_out,col.names = T,row.names = F, sep="\t")
}

### da linea di comando ####
#uniamo i files

echo -e 'chr\trs\tps\tn_mis\tn_obs\tallele1\tallele0\taf\tbeta\tse\tp_wald\tp_lrt\tp_score' > /home/nardone/Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR.txt
for chr in {1..22}
do
cat /home/nardone/Discromie/Deutano_Protano/File_MAF01_RSQ04/chr${chr}_SR_Discromie_rsid_rsq04_maf01.txt | sed '1d' | awk 'BEGIN {FS=" "}  {print $0}' >> /home/nardone/Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR.txt
cat /home/nardone/Discromie/Deutano_Protano/File_MAF01_RSQ04/chr${chr}_SR_Discromie_NOrs_rsq04_maf01.txt | sed '1d' | awk 'BEGIN {FS=" "}  {print $0}' >> /home/nardone/Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR.txt
done

##Fare file best selezionando per il p-value [Bash]
echo -e 'chr\trs\tps\tn_mis\tn_obs\tallele1\tallele0\taf\tbeta\tse\tp_wald\tp_lrt\tp_score' > /home/nardone/Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR_BEST.txt
cat /home/nardone/Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR.txt | sed '1d' | awk 'BEGIN {FS=" "}  ($13<=0.0001) {print $0}' >> /home/nardone/Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR_BEST.txt

## VEP da riga di comando
/shared/software/VEP/ensembl-vep-100/ensembl-vep/vep  -i /home/nardone/Discromie/GWAS_Discromie/Deutano_Protano/File_ALL_CHROMOSOME/TestVEP.txt --format "id" --cache --dir_cache /shared/resources/VEP_cache/100 --tab -o VEP_TEST.txt -e --distance 250000 --assembly GRCh38 --buffer_size 10000
###############################################

##Manhattan e QQ plot

screen -S grafici_GWAS  #creo screen separato in cui allochiamo 10 giga di memoria
qrsh -l h_vmem=10G

#Diminuire quantità di dati: dal file ALL_CHROMOSOME tolgo un po' di SNP per ridurre le dimensioni dei plot

data2<-a[a$p_score>=0.05,]
  x<-sample(rownames(data2),500000)
  data_ns<-a[rownames(a)%in%x,]
  data_s<-a[a$p_score<0.05,]
  data_ok<-rbind(data_ns,data_s)



#Script Manhattan
library(qqman)
palhattan <- c("royalblue4", "goldenrod1","forestgreen","lightcyan3", "cadetblue2", "darkviolet", "darkorange2", "orchid", "firebrick4", "darkolivegreen3", "red3", "black", "palevioletred1", "steelblue3", "violetred3", "salmon1", "slateblue2", "palegreen2", "steelblue1", "yellow2", "rosybrown1", "darkslategray")
pdf("Manhattan_MAF01_DP_corr_pval.pdf",width=21)
  manhattan(data_ok, chr = "chr", bp = "ps", p = "p_score", snp = "rs", col = palhattan, chrlabs = NULL, suggestiveline = F, genomewideline = -log10(6.42e-0), highlight = NULL, logp = TRUE, cex.main=2.5)
  dev.off()

##Script QQ plot
pdf("QQplot_SR_D_P_con_PCA.pdf")
qq(a$p_score, main="Association w/out MAF filtering")
dev.off()
## Calcolo lambda
lambda <- round(median((a$beta/a$se)^2)/ 0.4549364, 3)
lambda

echo -e 'chr\trs\tps\tn_mis\tn_obs\tallele1\tallele0\taf\tbeta\tse\tp_wald\tp_lrt\tp_score' > /home/nardone/Discromie/GWAS_Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR_BEST_MAF05.txt
cat /home/nardone/Discromie/GWAS_Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR.txt | sed '1d' | awk 'BEGIN {FS=" "}  ($8>=0.05 && $8<=0.95) {print $0}' >> /home/nardone/Discromie/Deutano_Protano/File_ALL_CHROMOSOME/SR_D_P_ALLCHR_BEST_MAF05.txt


##Principal Componnent Analysis (PCA) con plink
plink --bfile /netapp02/data/genotypes/SR/SR_updated_20210312 --indep-pairwise 50 5 0.5 ##filtrare files per r^2>0.5
plink --bfile /netapp02/data/genotypes/SR/SR_updated_20210312 --extract plink.prune.in --make-bed --out Prunedata_SR ##fare file con SNP filtrati
plink --bfile Prunedata_SR --pca 10 --out PCA_SR ##comando PCA

##Grafici PCA
library(ggplot2)
columns=c("fid", "Sample.name", "pca1", "pca2", "pca3", "pca4", "pca5", "pca6", "pca7", "pca8", "pca9", "pca10")
pca <-read.table(file="PCA_SR.eigenvec", sep ="", he=F, col.names=columns)[,c(2:12)]
pdf("PCA1vsPCA2_SR.pdf")
ggplot(pca, aes(x=pca1, y=pca2))+ geom_point()+theme_bw()+xlab("PC1")+ylab("PC2")
dev.off()

## Grafico PCA con paesi/etnia/provenienza geografica
#Creare file con l'informazione sulla provenienza/etnia e l'id dei soggetti. La colonna nell'id nominarla sample.name.Alternativamente, cambiare il nome che si dà alla colonna nell'oggetto "pca".
#I nomi delle colonne devono essere uguali!

pca <-read.table(file="/home/nardone/PCA_SR/PCA_SR.eigenvec", sep ="", he=F, col.names=columns)[,c(2:12)]
geo <- read.table(file="SR_Paesi_per_grafici_PCA.txt", he=T, sep=\t)
data <- merge(geo, pca, by="Sample.name")
pdf("PCA1vsPCA2_paesi_SR.pdf")
ggplot(data, aes(x=pca1, y=pca2, col=Country))+
geom_point()+theme_bw()+xlab("PC1") + ylab("PC2")+labs(col="")+labs(title="PCA Silk Road")
dev.off()

##Per Locus Zoom
#Suddividere il file ALL_CHROMOSOME in 3 usando awk (colonna chr condizione) (print$0). Dopodichè modificare la colonna degli rs in R usando:
b <- a %>% separate(rs, c('rs_id'), sep="_") #vanno caricate sia dplyr che tidyr. Per rinominare la colonna in maniera corretta
colnames(b)[which(names(b) == "rs_id")] <- "rs"
#Fare l'output del file con write.table (ricordarsi il quote=F e row.names=F!!!!)
#Alternativamente usare awk:
echo -e 'chr\trs\tps\tn_mis\tn_obs\tallele1\tallele0\taf\tbeta\tse\tp_wald\tp_lrt\tp_score' > /home/nardone/Discromie/Tritan_GWAS_PCA/output/ALL_CHR_MAF_filt_01_05/FIle_all1_8_tritan
cat /home/nardone/Discromie/Tritan_GWAS_PCA/output/ALL_CHR_MAF_filt_01_05/SR_Tritan_ALL_maf01.txt | sed '1d'| awk 'BEGIN {FS=" "} {$2=split($2,a,"_"); $2=a[1]} {print $0}' | awk '($1<=8) {print $0}' >> /home/nardone/Discromie/Tritan_GWAS_PCA/output/ALL_CHR_MAF_filt_01_05/FIle_all1_8_tritan


##Fare grafico sulla struttura della popolazione
#usare king per fare PCA con il riferimento di 1000Genome
/shared/software/king/king -b /shared/resources/1000G/KGref.bed,/home/nardone/PCA_SR/Prunedata_SR.bed --projection --mds
#In R:
library(plyr)
projpc <- read.table(file="kingpc.txt", header=T)
for_col <- read.table(file="king_popref.txt", header = T)[,3]
from <- names(summary(as.factor(for_col))) ## this gives me the four pops
to <- c("orange","dodgerblue","orchid","grey","black")
col <- mapvalues(for_col, from, to)
pdf("SR_pca_projection_on_1000GP.pdf")
plot(projpc$PC1, projpc$PC2, type="p", xlab="PC1", ylab="PC2",
     main = "Population Structure in Silk Road ", col = col)
points(projpc$PC1[projpc$AFF==2], projpc$PC2[projpc$AFF==2], col = "red")
legend("topright", c(from, "SR"),
       col=c(to,"red"),text.col = c(to, "red"), pch = 19, cex = 0.9)
dev.off()

##Filtrare VEP per protein_coding
# in R:
data<-read.table(dataset VEP)
SNP<-read.table(dataset best snp)
protein_cod<-data[data$BIOTYPE=="protein_coding",c(1,4,6,21)] #colonne per rs,consequence,gene,distance
merged<-merge(SNP,protein_cod[,c(1,2,3,4)], by.x="rs", by.y="Uploaded_variation", all.x=T, all.y=F)
file_sort<-merged[order(pippo1$rs,pippo1$DISTANCE),] #genenrere ordine prima per rs e poi per distanza


##Creazione heatmap
library(ggplot2)
library(wesanderson)
pal <- wes_palette("Zissou1", 100, type = "continuous")
heat <- ggplot(d, aes(x=Tissue, y=Genes, fill=log)) + xlab("Tissues") + ylab("Genes") + geom_tile()+ scale_fill_gradientn(colours = pal) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
coord_fixed(ratio=1/3) +
theme(axis.text.y=element_text(face="italic"))
well <- heat + labs(fill = "log2(TPM + 1)")
pdf("heatmap_geni_discro.pdf")
well
dev.off()

#Togliere gli underscore dalle varianti con rs per effettuare il merge con i file info per recuperare RSQ
echo -e chr\trs\tps\tn_mis\tn_obs\tallele1\tallele0\taf\tbeta\tse\tp_wald\tp_lrt\tp_score > SR_Tritan_cond_maf01_ALL_chr.txt
for chr in {1..22}
do
cat SR_Tritan_cond_maf01_chr${chr}.txt | sed '1d' | awk 'BEGIN{FS="\t";OFS="\t"} {if ($2~/^rs/) {split($2,a,"_"); $2=a[1]}} {print $0}' >> SR_Tritan_cond_maf01_ALL_chr.txt
done
#Merge i R con i file .info per recuperare Rsq
test<-merge(t,info, by.x="rs", by.y="SNP", all.x=F, all.y=F) # t<- file unificato delle associazioni del GWAS creato dallo script precedente; info<-file unificato con gli info score (se non disponibile per la popolazione in esame crearlo. Per la SR, andare su /netapp05/analisi_nardone/Discromie/GWAS_Discromie/Tritan_GWAS_PCA/output/ALL_CHR_MAF_filt_01_05/SR_info_conc.txta)
#Creare file info unificato:
for chr in {1..22}
do
cat /netapp02/data/imputation/HRC/SR/prob/SR_HRC_chr${chr}.info >> /home/nardone/Discromie/Tritan_GWAS_PCA/output/ALL_CHR_MAF_filt_01_05/SR_info_conc.txt
done
